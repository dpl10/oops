#!/usr/bin/perl
use strict;
my $G = 11;
my $g = 1;
my $i = '';
my $m = -62;
for(my $k = $#ARGV; $k >= 0; $k--){
	if($ARGV[$k] eq '-G'){
		$ARGV[$k+1] =~ tr/0123456789//cd;
		if($ARGV[$k+1]){
			$G = $ARGV[$k+1];
		}
		next;
	}
	if($ARGV[$k] eq '-g'){
		$ARGV[$k+1] =~ tr/0123456789//cd;
		if($ARGV[$k+1]){
			$g = $ARGV[$k+1];
		}
		next;
	}
	if($ARGV[$k] eq '-i'){
		if(-e $ARGV[$k+1]){
			$i = $ARGV[$k+1];
		}
		next;	
	}
	if($ARGV[$k] eq '-m'){
		$ARGV[$k+1] =~ tr/-0123456789//cd;
		if($ARGV[$k+1] < 0){
			if(($ARGV[$k+1] == -45) || ($ARGV[$k+1] == -50) || ($ARGV[$k+1] == -62)){
				$m = $ARGV[$k+1];
			}
		} else {
			$m = $ARGV[$k+1];
		}
	}
}
if($G && $g && length($i)){
	open(INFILE, '<', $i) or die("could not open $i!\n");
	my $alignment = ();
	my $sequence = '';
	while(my $line = <INFILE>){
		chomp($line);
		if($line =~ m/^>/){
			if(length($sequence)){
				process($sequence);
			}
			$sequence = '';
		} else {
			$sequence .= $line;
		}
	}
	process($sequence);
	close(INFILE);
	sub process {
		my $sequence = uc($_[0]);
		$sequence =~ tr/ACDEFGHIKLMNPQRSTVWYX\-//cd;
		my @bases = split(//, $sequence);
		my $k = $#{$alignment}+1;
		for(my $j = $#bases; $j >= 0; $j--){
			$alignment->[$k][$j] = $bases[$j];
		}
		return(0);
	}
	my %aa2int = (
		"A" => 0,
		"R" => 1,
		"N" => 2,
		"D" => 3,
		"C" => 4,
		"Q" => 5,
		"E" => 6,
		"G" => 7,
		"H" => 8,
		"I" => 9,
		"L" => 10,
		"K" => 11,
		"M" => 12,
		"F" => 13,
		"P" => 14,
		"S" => 15,
		"T" => 16,
		"W" => 17,
		"Y" => 18,
		"V" => 19
	);
	my @BLOSUM45 = (
		#  A  R  N  D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V
		[  5,-2,-1,-2,-1,-1,-1, 0,-2,-1,-1,-1,-1,-2,-1, 1, 0,-2,-2, 0],  # A
		[ -2, 7, 0,-1,-3, 1, 0,-2, 0,-3,-2, 3,-1,-2,-2,-1,-1,-2,-1,-2],  # R
		[ -1, 0, 6, 2,-2, 0, 0, 0, 1,-2,-3, 0,-2,-2,-2, 1, 0,-4,-2,-3],  # N 
		[ -2,-1, 2, 7,-3, 0, 2,-1, 0,-4,-3, 0,-3,-4,-1, 0,-1,-4,-2,-3],  # D
		[ -1,-3,-2,-3,12,-3,-3,-3,-3,-3,-2,-3,-2,-2,-4,-1,-1,-5,-3,-1],  # C
		[ -1, 1, 0, 0,-3, 6, 2,-2, 1,-2,-2, 1, 0,-4,-1, 0,-1,-2,-1,-3],  # Q
		[ -1, 0, 0, 2,-3, 2, 6,-2, 0,-3,-2, 1,-2,-3, 0, 0,-1,-3,-2,-3],  # E
		[  0,-2, 0,-1,-3,-2,-2, 7,-2,-4,-3,-2,-2,-3,-2, 0,-2,-2,-3,-3],  # G
		[ -2, 0, 1, 0,-3, 1, 0,-2,10,-3,-2,-1, 0,-2,-2,-1,-2,-3, 2,-3],  # H
		[ -1,-3,-2,-4,-3,-2,-3,-4,-3, 5, 2,-3, 2, 0,-2,-2,-1,-2, 0, 3],  # I
		[ -1,-2,-3,-3,-2,-2,-2,-3,-2, 2, 5,-3, 2, 1,-3,-3,-1,-2, 0, 1],  # L
		[ -1, 3, 0, 0,-3, 1, 1,-2,-1,-3,-3, 5,-1,-3,-1,-1,-1,-2,-1,-2],  # K
		[ -1,-1,-2,-3,-2, 0,-2,-2, 0, 2, 2,-1, 6, 0,-2,-2,-1,-2, 0, 1],  # M
		[ -2,-2,-2,-4,-2,-4,-3,-3,-2, 0, 1,-3, 0, 8,-3,-2,-1, 1, 3, 0],  # F
		[ -1,-2,-2,-1,-4,-1, 0,-2,-2,-2,-3,-1,-2,-3, 9,-1,-1,-3,-3,-3],  # P
		[  1,-1, 1, 0,-1, 0, 0, 0,-1,-2,-3,-1,-2,-2,-1, 4, 2,-4,-2,-1],  # S
		[  0,-1, 0,-1,-1,-1,-1,-2,-2,-1,-1,-1,-1,-1,-1, 2, 5,-3,-1, 0],  # T
		[ -2,-2,-4,-4,-5,-2,-3,-2,-3,-2,-2,-2,-2, 1,-3,-4,-3,15, 3,-3],  # W
		[ -2,-1,-2,-2,-3,-1,-2,-3, 2, 0, 0,-1, 0, 3,-3,-2,-1, 3, 8,-1],  # Y
		[  0,-2,-3,-3,-1,-3,-3,-3,-3, 3, 1,-2, 1, 0,-3,-1, 0,-3,-1, 5]   # V
		#  A  R  N  D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V 
	);
	my @BLOSUM50 = (
		#  A  R  N  D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V
		[  5,-2,-1,-2,-1,-1,-1, 0,-2,-1,-2,-1,-1,-3,-1, 1, 0,-3,-2, 0],  # A
		[ -2, 7,-1,-2,-4, 1, 0,-3, 0,-4,-3, 3,-2,-3,-3,-1,-1,-3,-1,-3],  # R
		[ -1,-1, 7, 2,-2, 0, 0, 0, 1,-3,-4, 0,-2,-4,-2, 1, 0,-4,-2,-3],  # N
		[ -2,-2, 2, 8,-4, 0, 2,-1,-1,-4,-4,-1,-4,-5,-1, 0,-1,-5,-3,-4],  # D
		[ -1,-4,-2,-4,13,-3,-3,-3,-3,-2,-2,-3,-2,-2,-4,-1,-1,-5,-3,-1],  # C
		[ -1, 1, 0, 0,-3, 7, 2,-2, 1,-3,-2, 2, 0,-4,-1, 0,-1,-1,-1,-3],  # Q
		[ -1, 0, 0, 2,-3, 2, 6,-3, 0,-4,-3, 1,-2,-3,-1,-1,-1,-3,-2,-3],  # E
		[  0,-3, 0,-1,-3,-2,-3, 8,-2,-4,-4,-2,-3,-4,-2, 0,-2,-3,-3,-4],  # G
		[ -2, 0, 1,-1,-3, 1, 0,-2,10,-4,-3, 0,-1,-1,-2,-1,-2,-3, 2,-4],  # H 
		[ -1,-4,-3,-4,-2,-3,-4,-4,-4, 5, 2,-3, 2, 0,-3,-3,-1,-3,-1, 4],  # I
		[ -2,-3,-4,-4,-2,-2,-3,-4,-3, 2, 5,-3, 3, 1,-4,-3,-1,-2,-1, 1],  # L
		[ -1, 3, 0,-1,-3, 2, 1,-2, 0,-3,-3, 6,-2,-4,-1, 0,-1,-3,-2,-3],  # K
		[ -1,-2,-2,-4,-2, 0,-2,-3,-1, 2, 3,-2, 7, 0,-3,-2,-1,-1, 0, 1],  # M
		[ -3,-3,-4,-5,-2,-4,-3,-4,-1, 0, 1,-4, 0, 8,-4,-3,-2, 1, 4,-1],  # F
		[ -1,-3,-2,-1,-4,-1,-1,-2,-2,-3,-4,-1,-3,-4,10,-1,-1,-4,-3,-3],  # P
		[  1,-1, 1, 0,-1, 0,-1, 0,-1,-3,-3, 0,-2,-3,-1, 5, 2,-4,-2,-2],  # S
		[  0,-1, 0,-1,-1,-1,-1,-2,-2,-1,-1,-1,-1,-2,-1, 2, 5,-3,-2, 0],  # T
		[ -3,-3,-4,-5,-5,-1,-3,-3,-3,-3,-2,-3,-1, 1,-4,-4,-3,15, 2,-3],  # W
		[ -2,-1,-2,-3,-3,-1,-2,-3, 2,-1,-1,-2, 0, 4,-3,-2,-2, 2, 8,-1],  # Y
		[  0,-3,-3,-4,-1,-3,-3,-4,-4, 4, 1,-3, 1,-1,-3,-2, 0,-3,-1, 5]   # V
		#  A  R  N  D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V    
	);
	my @BLOSUM62 = (
		#  A  R  N  D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V
		[  4,-1,-2,-2, 0,-1,-1, 0,-2,-1,-1,-1,-1,-2,-1, 1, 0,-3,-2, 0],  # A
		[ -1, 5, 0,-2,-3, 1, 0,-2, 0,-3,-2, 2,-1,-3,-2,-1,-1,-3,-2,-3],  # R
		[ -2, 0, 6, 1,-3, 0, 0, 0, 1,-3,-3, 0,-2,-3,-2, 1, 0,-4,-2,-3],  # N
		[ -2,-2, 1, 6,-3, 0, 2,-1,-1,-3,-4,-1,-3,-3,-1, 0,-1,-4,-3,-3],  # D
		[  0,-3,-3,-3, 9,-3,-4,-3,-3,-1,-1,-3,-1,-2,-3,-1,-1,-2,-2,-1],  # C
		[ -1, 1, 0, 0,-3, 5, 2,-2, 0,-3,-2, 1, 0,-3,-1, 0,-1,-2,-1,-2],  # Q
		[ -1, 0, 0, 2,-4, 2, 5,-2, 0,-3,-3, 1,-2,-3,-1, 0,-1,-3,-2,-2],  # E
		[  0,-2, 0,-1,-3,-2,-2, 6,-2,-4,-4,-2,-3,-3,-2, 0,-2,-2,-3,-3],  # G
		[ -2, 0, 1,-1,-3, 0, 0,-2, 8,-3,-3,-1,-2,-1,-2,-1,-2,-2, 2,-3],  # H
		[ -1,-3,-3,-3,-1,-3,-3,-4,-3, 4, 2,-3, 1, 0,-3,-2,-1,-3,-1, 3],  # I
		[ -1,-2,-3,-4,-1,-2,-3,-4,-3, 2, 4,-2, 2, 0,-3,-2,-1,-2,-1, 1],  # L
		[ -1, 2, 0,-1,-3, 1, 1,-2,-1,-3,-2, 5,-1,-3,-1, 0,-1,-3,-2,-2],  # K
		[ -1,-1,-2,-3,-1, 0,-2,-3,-2, 1, 2,-1, 5, 0,-2,-1,-1,-1,-1, 1],  # M 
		[ -2,-3,-3,-3,-2,-3,-3,-3,-1, 0, 0,-3, 0, 6,-4,-2,-2, 1, 3,-1],  # F
		[ -1,-2,-2,-1,-3,-1,-1,-2,-2,-3,-3,-1,-2,-4, 7,-1,-1,-4,-3,-2],  # P
		[  1,-1, 1, 0,-1, 0, 0, 0,-1,-2,-2, 0,-1,-2,-1, 4, 1,-3,-2,-2],  # S
		[  0,-1, 0,-1,-1,-1,-1,-2,-2,-1,-1,-1,-1,-2,-1, 1, 5,-2,-2, 0],  # T
		[ -3,-3,-4,-4,-2,-2,-3,-2,-2,-3,-2,-3,-1, 1,-4,-3,-2,11, 2,-3],  # W
		[ -2,-2,-2,-3,-2,-1,-2,-3, 2,-1,-1,-2,-1, 3,-3,-2,-2, 2, 7,-1],  # Y
		[  0,-3,-3,-3,-1,-2,-2,-3,-3, 3, 1,-2, 1,-1,-2,-2, 0,-3,-1, 4]   # V
		#  A  R  N  D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V      
	);
	my $sum = 0;
	for(my $k = $#{$alignment}; $k > 0; $k--){
		for(my $kk = $k-1; $kk >= 0; $kk--){
			my $gap = 0;
			my $start = 0;
			for(my $j = $#{$alignment->[$k]}; $j >= 0; $j--){
				if(($alignment->[$k][$j] =~ m/[ACDEFGHIKLMNPQRSTVWYX]/) && ($alignment->[$kk][$j] =~ m/[ACDEFGHIKLMNPQRSTVWYX]/)){
					$sum += $gap;
					$gap = 0;
					$start = 1;
					if($m == -45){
						$sum += $BLOSUM45[$aa2int{$alignment->[$k][$j]}][$aa2int{$alignment->[$kk][$j]}];
					} elsif($m == -50){
						$sum += $BLOSUM50[$aa2int{$alignment->[$k][$j]}][$aa2int{$alignment->[$kk][$j]}];
					} elsif($m == -62){
						$sum += $BLOSUM62[$aa2int{$alignment->[$k][$j]}][$aa2int{$alignment->[$kk][$j]}];
					} elsif($alignment->[$k][$j] ne $alignment->[$kk][$j]){
						$sum += $m;
					}
				} elsif(($start == 1) && (($alignment->[$k][$j] eq '-') || ($alignment->[$kk][$j] eq '-'))){
					if($gap == 0){
						$gap += $G;
					} else {
						$gap += $g;
					}
				}
			}
		}
	}
	print("$sum\n");
} else {
	print(STDERR "\npairsAA.pl a script to calculate the sum of pairs from an aligned\n");
	print(STDERR "amino acid FASTA file. Default scoring values mimic BLASTP.\n\n");
	print(STDERR "USAGE: pairsAA.pl [-G X] [-g X] -i file  [-m X]\n");
	print(STDERR "-G\tinteger indel opening cost (default = $G)\n");
	print(STDERR "-g\tinteger indel cost (default = $g)\n");
	print(STDERR "-i\tspecifies an aligned FASTA file (required)\n");
	print(STDERR "-m\tpositive integer amino acid mismatch\n\tcost (-45, -50, -62 = use BLOSUM-XX; default = $m)\n\n");
}
exit(0);
